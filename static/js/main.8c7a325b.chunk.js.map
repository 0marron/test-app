{"version":3,"sources":["components/WeatherCard.js","components/MainPage.js","App.js","components/City.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","city_name","a","fetch","response","ok","status","json","city_data","propB","setStateHandler","countriesDic","Card","className","to","state","propA","city","Body","Title","ListGroup","variant","Item","main","temp","wind","speed","toFixed","clouds","all","Button","onClick","HTTP_GET","copy","Object","assign","MainPage","useState","fieldValue","setFieldValue","countriesDicSet","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","submitHandler","event","arg","preventDefault","test","length","undefined","obj","Form","onSubmit","Group","md","controlId","Control","onChange","e","value","target","type","placeholder","required","Feedback","keys","map","i","App","City","useLocation","hourlyTemp","setHourlyTemp","hours","lat","lon","data","hourly","coord","style","textAlign","name","temp_min","humidity","visibility","weather","description","Date","sys","sunrise","toLocaleTimeString","sunset","feels_like","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","baseUrl","document","getElementsByTagName","getAttribute","rootElement","getElementById","ReactDOM","render","basename","path","element"],"mappings":"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","file":"static/js/main.8c7a325b.chunk.js","sourcesContent":["import { Button,Card,ListGroup } from \"react-bootstrap\";\r\nimport '../App.css'\r\nimport { Link } from \"react-router-dom\";\r\nexport const WeatherCard =(props)=> {\r\n   \r\n    function clickHandlerAdd(){\r\n        HTTP_GET(props.propA.city);\r\n    }\r\n    function clickHandlerDelete(){\r\n        const copy = Object.assign({}, props.propA.countriesDic);\r\n        delete copy[props.propA.city];\r\n        props.propB.setStateHandler(copy);\r\n    }\r\n    async function HTTP_GET(city_name) {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?units=metric&lang=ru&q=${city_name}&appid=37b1440e08357c82b2b3a48792f3f086` );\r\n        if(!response.ok ){\r\n            //TODO Bad request\r\n            return;\r\n        }\r\n        if( response.status !== 200){\r\n            //TODO Page not exist\r\n            return;\r\n        }\r\n        let city_data = await response.json();\r\n        props.propB.setStateHandler(countriesDic => ({...countriesDic, [city_name]: city_data }));\r\n      }\r\n\r\nreturn (\r\n     \r\n        <Card   className=\"weather-card\"  >\r\n        <Link to='/city' state= {props.propA.countriesDic[props.propA.city]}>\r\n            <Card.Body>\r\n            <Card.Title>  {props.propA.city}</Card.Title>\r\n            <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>Температура: {props.propA.countriesDic[props.propA.city].main.temp} °C</ListGroup.Item>\r\n                        <ListGroup.Item>Скорость ветра: {props.propA.countriesDic[props.propA.city].wind.speed.toFixed()} km/h</ListGroup.Item>\r\n                        <ListGroup.Item>Облачность: {props.propA.countriesDic[props.propA.city].clouds.all.toFixed()} %</ListGroup.Item>\r\n            </ListGroup>\r\n            </Card.Body>\r\n        </Link>\r\n        <Button className=\"card-button\" onClick={clickHandlerAdd} variant=\"success\">Обновить</Button>\r\n        <Button className=\"card-button\" onClick={clickHandlerDelete} variant=\"danger\">Удалить</Button>\r\n    </Card>\r\n  \r\n );    \r\n}\r\n ","import { useState, useEffect } from 'react';\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport {WeatherCard} from './WeatherCard';\r\n\r\nexport const MainPage =()=>{\r\n  const [fieldValue, setFieldValue] = useState(\"\");\r\n  const [countriesDic, countriesDicSet] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n    let storage = localStorage.getItem('weatherDataStorage') !== null;\r\n    if(storage === true){\r\n      countriesDicSet(JSON.parse(localStorage.getItem('weatherDataStorage')));\r\n    }\r\n}, []);\r\n \r\nuseEffect(() => {\r\n  localStorage.setItem('weatherDataStorage', JSON.stringify(countriesDic));\r\n}, [countriesDic]);\r\n\r\n  function validateCountry(arg){\r\n        if (arg === \"\") {\r\n          return false;\r\n        }\r\n        if (!/^[a-zA-Z\\s]*$/g.test(arg) || arg.length < 3 || arg === undefined) {\r\n            return false;\r\n        }    \r\n        return true;\r\n    }\r\n   \r\n    async function HTTP_GET(city_name) {\r\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?units=metric&lang=ru&q=${city_name}&appid=37b1440e08357c82b2b3a48792f3f086` );\r\n        if(!response.ok ){\r\n            //TODO Bad request\r\n            return;\r\n        }\r\n        if( response.status !== 200){\r\n            //TODO Page not exist\r\n            return;\r\n        }\r\n        let city_data = await response.json();\r\n        countriesDicSet(countriesDic => ({...countriesDic, [city_name]: city_data }));\r\n      }\r\n \r\n      const submitHandler = (event)=>{\r\n        event.preventDefault();\r\n        if(validateCountry(fieldValue)){\r\n            HTTP_GET(fieldValue);\r\n        }\r\n        else{\r\n            //TODO Alert\r\n        }\r\n      }\r\n      const onChangeHandler = (value)=>{\r\n        setFieldValue(value);\r\n      }\r\n   \r\n      const setStateHandler =(obj)=>{\r\n        countriesDicSet(obj);\r\n      }\r\n    return (\r\n      <>\r\n      <div className=\"form-container\">\r\n       <Form onSubmit={ submitHandler } className=\"city-form\">\r\n        <Form.Group  md=\"5\" controlId=\"validationCustom03\">\r\n            <Form.Control className=\"form-control\"  onChange={(e) =>onChangeHandler(e.target.value)} value={fieldValue} type=\"text\" placeholder=\"Город (на латинице)\" required />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n                Please provide a valid city.\r\n            </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button className=\"city-button\" variant=\"primary\" type=\"submit\"  onSubmit={submitHandler}> Добавить </Button>\r\n      </Form>\r\n      </div>\r\n      <div className=\"cards-container\">\r\n        {\r\n                Object.keys(countriesDic).map ((city, i) => { \r\n                    return(\r\n                        <WeatherCard key={i} propA={{city: city, countriesDic: countriesDic}} propB={{setStateHandler: setStateHandler}}  />\r\n                    )\r\n                })\r\n        }\r\n      </div>\r\n      </>\r\n    );\r\n}\r\n  ","\n \n\nimport {MainPage} from './components/MainPage';\nfunction App() {\n \n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { ListGroup } from 'react-bootstrap';\r\nimport '../detail-city.css';\r\n \r\nconst City = () => {    \r\n    const location = useLocation()\r\n    const city_data = location.state\r\n    const [hourlyTemp, setHourlyTemp] = useState([]);\r\n    const hours = [\"00:00\",\"01:00\",\"02:00\",\"03:00\",\"04:00\",\"05:00\",\"06:00\",\"07:00\",\"08:00\",\"09:00\",\"10:00\",\"11:00\",\"12:00\",\"13:00\",\"14:00\",\"15:00\",\"16:00\",\"17:00\",\"18:00\",\"19:00\",\"20:00\",\"21:00\",\"22:00\",\"23:00\"]\r\n\r\n \r\n\r\n    async function HTTP_GET(lat, lon) {\r\n        let response =  await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=daily,minutely,current,alerts&lang=ru&appid=37b1440e08357c82b2b3a48792f3f086` );\r\n        if(!response.ok ){\r\n            //TODO Bad request\r\n            return null;\r\n        }\r\n        if( response.status !== 200){\r\n            //TODO Not exist\r\n            return null;\r\n        }\r\n        let data = await response.json();\r\n        setHourlyTemp(data.hourly);\r\n      }\r\n\r\n   useEffect(() => {\r\n      HTTP_GET(city_data.coord.lat, city_data.coord.lon);\r\n   }, []);\r\n   \r\n    return (\r\n        <div className=\"detail-info-block\">\r\n            <div style={{textAlign:'center'}}><h1> Подробности: {city_data.name}  </h1> </div>\r\n            <ListGroup className=\"rows\" >\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Макс./Мин.</div>  <div className=\"right-part\"> {city_data.main.temp_min}/{city_data.main.temp_min} °C  </div> </ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Влажность</div>  <div className=\"right-part\"> {city_data.main.humidity}% </div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Давление</div>  <div className=\"right-part\">{city_data.wind.speed}km/h </div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Видимость</div>  <div className=\"right-part\"> {city_data.visibility}m</div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Облачность</div>  <div className=\"right-part\">{city_data.weather[0].description} </div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Восход/Рассвет</div>  <div className=\"right-part\">  {new Date(city_data.sys.sunrise * 1000).toLocaleTimeString()} / {new Date(city_data.sys.sunset * 1000).toLocaleTimeString()}</div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Температура</div>  <div className=\"right-part\"> {city_data.main.temp} °C</div></ListGroup.Item>\r\n                <ListGroup.Item className=\"row\"> <div className=\"left-part\">Ощущается как</div>  <div className=\"right-part\"> {city_data.main.feels_like} °C</div></ListGroup.Item>\r\n            </ListGroup>\r\n\r\n            <div className=\"hourly-temp\"> \r\n                <div className=\"hourly-temp-inner\">\r\n                \r\n               {\r\n                    hourlyTemp.map(function(name,i)  {\r\n                        if(i<24){\r\n                            return (\r\n                                <div style={{marginTop: `calc(100px - ${name.temp*3}px)` }} className=\"temp-cube\" key={i}> {name.temp.toFixed()}°C<div className=\"hour\"> {hours[i]} </div> </div>\r\n                             )\r\n                        }\r\n                    })\r\n               }\r\n               \r\n               </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n  }\r\n  export default  City;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport City from './components/City';\n\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from 'react-router-dom';\n \n\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <BrowserRouter basename={baseUrl}>\n   <Routes>\n      <Route path=\"/\"  element={<App />} />\n      <Route path=\"city\" element={<City />} />\n    </Routes>\n   \n  </BrowserRouter>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n reportWebVitals();\n"],"sourceRoot":""}